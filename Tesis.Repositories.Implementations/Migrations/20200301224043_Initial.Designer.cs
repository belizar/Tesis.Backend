// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tesis.Repositories.Implementations;

namespace Tesis.Repositories.Implementation.Migrations
{
    [DbContext(typeof(AlimaDataContext))]
    [Migration("20200301224043_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tesis.Models.Dominio.Cliente.Cliente", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido");

                    b.Property<bool>("Baja");

                    b.Property<long>("CUIL");

                    b.Property<string>("Email");

                    b.Property<DateTime>("FechaDeNacimiento");

                    b.Property<string>("Nombre");

                    b.Property<int>("NroCliente");

                    b.HasKey("ID");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Tesis.Models.Dominio.Cliente.Telefono", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Baja")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("Cliente_ID");

                    b.Property<long>("Numero");

                    b.HasKey("ID");

                    b.HasIndex("Cliente_ID");

                    b.ToTable("Telefonos");
                });

            modelBuilder.Entity("Tesis.Models.Dominio.Cliente.Trabajo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Baja")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<long?>("CUIT");

                    b.Property<string>("Cargo");

                    b.Property<int>("ClienteID");

                    b.Property<DateTime>("FechaDeIngreso");

                    b.Property<string>("LugarDeTrabajo");

                    b.Property<decimal>("Sueldo");

                    b.Property<long>("TelefonoLaboral");

                    b.HasKey("ID");

                    b.HasIndex("ClienteID");

                    b.ToTable("Trabajos");
                });

            modelBuilder.Entity("Tesis.Models.Dominio.Credito.Credito", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Baja")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("EstadoDeCreditoID");

                    b.Property<DateTime>("FechaAlta");

                    b.Property<int>("GaranteID");

                    b.Property<decimal>("GastosAdministrativos");

                    b.Property<decimal>("MontoSolicitado");

                    b.Property<int>("NroCredito");

                    b.Property<int>("ParametroID");

                    b.Property<int>("PropietarioID");

                    b.Property<int?>("SituacionCrediticia");

                    b.HasKey("ID");

                    b.HasIndex("EstadoDeCreditoID");

                    b.HasIndex("GaranteID");

                    b.HasIndex("ParametroID");

                    b.HasIndex("PropietarioID");

                    b.ToTable("Creditos");
                });

            modelBuilder.Entity("Tesis.Models.Dominio.Credito.Cuota", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Baja")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("Credito_ID");

                    b.Property<int>("DiasDeMora");

                    b.Property<DateTime?>("FechaDePago");

                    b.Property<decimal>("Interes");

                    b.Property<decimal>("Monto");

                    b.Property<decimal>("MontoPorMora");

                    b.Property<int>("Numero");

                    b.Property<bool>("Pagada")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Vencimiento");

                    b.HasKey("ID");

                    b.HasIndex("Credito_ID");

                    b.ToTable("Cuotas");
                });

            modelBuilder.Entity("Tesis.Models.Dominio.Credito.EstadoDeCredito", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Baja")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Nombre");

                    b.HasKey("ID");

                    b.ToTable("EstadoDeCredito");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Baja = false,
                            Nombre = "Pendiente De Aprobar"
                        },
                        new
                        {
                            ID = 2,
                            Baja = false,
                            Nombre = "Listo Para Aprobar"
                        },
                        new
                        {
                            ID = 3,
                            Baja = false,
                            Nombre = "Aprobado"
                        },
                        new
                        {
                            ID = 4,
                            Baja = false,
                            Nombre = "Otorgado"
                        },
                        new
                        {
                            ID = 5,
                            Baja = false,
                            Nombre = "Cancelado"
                        },
                        new
                        {
                            ID = 6,
                            Baja = false,
                            Nombre = "Rechazado"
                        },
                        new
                        {
                            ID = 7,
                            Baja = false,
                            Nombre = "Anulado"
                        });
                });

            modelBuilder.Entity("Tesis.Models.Dominio.Credito.GaranteEnCredito", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Baja");

                    b.Property<int?>("CreditoID");

                    b.Property<int>("GaranteID");

                    b.HasKey("ID");

                    b.HasIndex("CreditoID");

                    b.HasIndex("GaranteID");

                    b.ToTable("GaranteEnCredito");
                });

            modelBuilder.Entity("Tesis.Models.Dominio.Credito.Parametros", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Baja")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Fecha");

                    b.Property<decimal>("TEM");

                    b.Property<decimal>("TasaMora");

                    b.HasKey("ID");

                    b.ToTable("Parametros");
                });

            modelBuilder.Entity("Tesis.Models.Dominio.Movimientos.Movimiento", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Baja")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Concepto");

                    b.Property<DateTime>("Fecha");

                    b.Property<decimal>("Monto");

                    b.Property<decimal>("Saldo");

                    b.Property<int>("TipoId");

                    b.HasKey("ID");

                    b.HasIndex("TipoId");

                    b.ToTable("Movimientos");
                });

            modelBuilder.Entity("Tesis.Models.Dominio.Movimientos.TiposDeMovimiento", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Baja")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Nombre");

                    b.HasKey("ID");

                    b.ToTable("TiposDeMovimiento");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Baja = false,
                            Nombre = "Debe"
                        },
                        new
                        {
                            ID = 2,
                            Baja = false,
                            Nombre = "Haber"
                        });
                });

            modelBuilder.Entity("Tesis.Models.Dominio.Cliente.Cliente", b =>
                {
                    b.OwnsOne("Tesis.Models.Dominio.Cliente.Domicilio", "DomicilioPersonal", b1 =>
                        {
                            b1.Property<int>("ClienteID")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Barrio")
                                .HasColumnName("Barrio");

                            b1.Property<string>("Calle")
                                .HasColumnName("Calle");

                            b1.Property<string>("Depto")
                                .HasColumnName("Depto");

                            b1.Property<string>("Localidad")
                                .HasColumnName("Localidad");

                            b1.Property<int?>("Lote")
                                .HasColumnName("Lote");

                            b1.Property<int?>("Manzana")
                                .HasColumnName("Manzana");

                            b1.Property<int?>("Numero")
                                .HasColumnName("Numero");

                            b1.Property<int?>("Piso")
                                .HasColumnName("Piso");

                            b1.HasKey("ClienteID");

                            b1.ToTable("Clientes");

                            b1.HasOne("Tesis.Models.Dominio.Cliente.Cliente")
                                .WithOne("DomicilioPersonal")
                                .HasForeignKey("Tesis.Models.Dominio.Cliente.Domicilio", "ClienteID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Tesis.Models.Dominio.Cliente.Telefono", b =>
                {
                    b.HasOne("Tesis.Models.Dominio.Cliente.Cliente", "Cliente")
                        .WithMany("Telefonos")
                        .HasForeignKey("Cliente_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tesis.Models.Dominio.Cliente.Trabajo", b =>
                {
                    b.HasOne("Tesis.Models.Dominio.Cliente.Cliente", "Cliente")
                        .WithMany("Trabajos")
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Tesis.Models.Dominio.Cliente.Domicilio", "DomicilioLaboral", b1 =>
                        {
                            b1.Property<int>("TrabajoID")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Barrio")
                                .HasColumnName("Barrio");

                            b1.Property<string>("Calle")
                                .HasColumnName("Calle");

                            b1.Property<string>("Depto")
                                .HasColumnName("Depto");

                            b1.Property<string>("Localidad")
                                .HasColumnName("Localidad");

                            b1.Property<int?>("Lote")
                                .HasColumnName("Lote");

                            b1.Property<int?>("Manzana")
                                .HasColumnName("Manzana");

                            b1.Property<int?>("Numero")
                                .HasColumnName("Numero");

                            b1.Property<int?>("Piso")
                                .HasColumnName("Piso");

                            b1.HasKey("TrabajoID");

                            b1.ToTable("Trabajos");

                            b1.HasOne("Tesis.Models.Dominio.Cliente.Trabajo")
                                .WithOne("DomicilioLaboral")
                                .HasForeignKey("Tesis.Models.Dominio.Cliente.Domicilio", "TrabajoID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Tesis.Models.Dominio.Credito.Credito", b =>
                {
                    b.HasOne("Tesis.Models.Dominio.Credito.EstadoDeCredito", "EstadoActual")
                        .WithMany()
                        .HasForeignKey("EstadoDeCreditoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tesis.Models.Dominio.Cliente.Cliente", "Garante")
                        .WithMany()
                        .HasForeignKey("GaranteID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tesis.Models.Dominio.Credito.Parametros", "Parametro")
                        .WithMany()
                        .HasForeignKey("ParametroID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tesis.Models.Dominio.Cliente.Cliente", "Propietario")
                        .WithMany()
                        .HasForeignKey("PropietarioID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tesis.Models.Dominio.Credito.Cuota", b =>
                {
                    b.HasOne("Tesis.Models.Dominio.Credito.Credito", "Credito")
                        .WithMany("Cuotas")
                        .HasForeignKey("Credito_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tesis.Models.Dominio.Credito.GaranteEnCredito", b =>
                {
                    b.HasOne("Tesis.Models.Dominio.Credito.Credito", "Credito")
                        .WithMany("Garantes")
                        .HasForeignKey("CreditoID");

                    b.HasOne("Tesis.Models.Dominio.Cliente.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("GaranteID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tesis.Models.Dominio.Movimientos.Movimiento", b =>
                {
                    b.HasOne("Tesis.Models.Dominio.Movimientos.TiposDeMovimiento", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
